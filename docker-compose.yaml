version: "3"

services:
  nodejs-opentelemetry-master:
    container_name: nodejs-opentelemetry-master
    build:
      context: ./nodejs-opentelemetry-master
      dockerfile: Dockerfile
    image: nodejs-opentelemetry-master
    command: "npm run start:debug"
    volumes:
      - ./nodejs-opentelemetry-master:/app
    ports:
      - 3000:3000
    tty: true
    networks:
      - custom_network

  nodejs-opentelemetry-slave:
    container_name: nodejs-opentelemetry-slave
    build:
      context: ./nodejs-opentelemetry-slave
      dockerfile: Dockerfile
    image: nodejs-opentelemetry-slave
    command: "npm run start:debug"
    volumes:
      - ./nodejs-opentelemetry-slave:/app
    ports:
      - 3001:3001
    tty: true
    networks:
      - custom_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - 16686:16686
      - 14268
      - 14250
    networks:
      - custom_network

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
    networks:
      - custom_network

  #apm-server:
  #  container_name: apm-server
  #  image: docker.elastic.co/apm/apm-server:7.12.0
  #  depends_on:
  #    elasticsearch:
  #      condition: service_healthy
  #    kibana:
  #      condition: service_healthy
  #  cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
  #  cap_drop: ["ALL"]
  #  ports:
  #  - 8200:8200
  #  networks:
  #    - custom_network
  #  command: >
  #     apm-server -e
  #       -E apm-server.rum.enabled=true
  #       -E setup.kibana.host=kibana:5601
  #       -E setup.template.settings.index.number_of_replicas=0
  #       -E apm-server.kibana.enabled=true
  #       -E apm-server.kibana.host=kibana:5601
  #       -E output.elasticsearch.hosts=["elasticsearch:9200"]
  #  healthcheck:
  #    interval: 10s
  #    retries: 12
  #    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
  #
  #elasticsearch:
  #  container_name: elasticsearch
  #  image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
  #  environment:
  #  - bootstrap.memory_lock=true
  #  - cluster.name=docker-cluster
  #  - cluster.routing.allocation.disk.threshold_enabled=false
  #  - discovery.type=single-node
  #  - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
  #  ulimits:
  #    memlock:
  #      hard: -1
  #      soft: -1
  #  volumes:
  #  - esdata:/usr/share/elasticsearch/data
  #  ports:
  #  - 9200:9200
  #  networks:
  #    - custom_network
  #  healthcheck:
  #    interval: 20s
  #    retries: 10
  #    test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
  #
  #kibana:
  #  container_name: kibana
  #  image: docker.elastic.co/kibana/kibana:7.12.0
  #  depends_on:
  #    elasticsearch:
  #      condition: service_healthy
  #  environment:
  #    ELASTICSEARCH_URL: http://elasticsearch:9200
  #    ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #  ports:
  #  - 5601:5601
  #  networks:
  #    - custom_network
  #  healthcheck:
  #    interval: 10s
  #    retries: 20
  #    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/conf/collector-config.yaml", "--log-level=DEBUG"]
    volumes:
      - ./collector-config.yaml:/conf/collector-config.yaml
    ports:
      - 55681 # Http receiver
    tty: true
    networks:
      - custom_network
    depends_on:
      - zipkin
      - jaeger
      #- apm-server

volumes:
  esdata:
    driver: local

networks:
  custom_network:
    external:
      name: payvision
